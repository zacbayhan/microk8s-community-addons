#!/usr/bin/env bash

set -e

source $SNAP/actions/common/utils.sh


KNATIVE_VERSION="1.8.2"
KNATIVE_FUNC_VERSION="1.8.2"
KNATIVE_SERVING=true
KNATIVE_EVENTING=false
ARCH=$(arch)
KUBECTL="$SNAP/microk8s-kubectl.wrapper"

echo "Enabling Knative"


for i in "$@"
do
case $i in
    --no-serving)
    KNATIVE_SERVING=false
    shift # past argument
    ;;
    --eventing)
    KNATIVE_EVENTING=true
    shift # past argument
    ;;
    *)
          # unknown option
    ;;
esac
done

#requirement
"$SNAP/microk8s-enable.wrapper" dns

echo "Enabling Knative ${KNATIVE_VERSION}"
$KUBECTL apply -f https://github.com/knative/operator/releases/download/knative-v$KNATIVE_VERSION/operator.yaml

if [ "$KNATIVE_SERVING" = "true" ]; then
    echo "Installing Knative Serving ${KNATIVE_VERSION}"
$KUBECTL apply -f- << EOF
apiVersion: v1
kind: Namespace
metadata:
  name: knative-serving
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeServing
metadata:
  name: knative-serving
  namespace: knative-serving
spec:
  ingress:
    kourier:
      enabled: true
  config:
    network:
      ingress-class: "kourier.ingress.networking.knative.dev"
EOF
fi

if [ "$KNATIVE_EVENTING" = "true" ]; then
   echo "Installing Knative Eventing ${KNATIVE_VERSION}"
$KUBECTL apply -f- << EOF
apiVersion: v1
kind: Namespace
metadata:
  name: knative-eventing
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeEventing
metadata:
  name: knative-eventing
  namespace: knative-eventing
EOF
fi

# Handle Knative CLIs
if [ ! -f "${SNAP_COMMON}/plugins/kn" ]; then
  echo "Fetching Knative CLI version ${KNATIVE_VERSION} in $SNAP_COMMON}/plugins/kn"
  run_with_sudo mkdir -p "${SNAP_COMMON}/plugins"
  fetch_as https://github.com/knative/client/releases/download/knative-v${KNATIVE_VERSION}/kn-linux-${ARCH} "${SNAP_COMMON}/plugins/kn"
  run_with_sudo chmod uo+x "${SNAP_COMMON}/plugins/kn"
fi
if [ ! -f "${SNAP_COMMON}/plugins/kn-admin" ]; then
  echo "Fetching Knative CLI Admin plugin version ${KNATIVE_VERSION} in ${SNAP_COMMON}/plugins/kn-admin"
  run_with_sudo mkdir -p "${SNAP_COMMON}/plugins"
  fetch_as https://github.com/knative-sandbox/kn-plugin-admin/releases/download/knative-v${KNATIVE_VERSION}/kn-admin-linux-${ARCH} "${SNAP_COMMON}/plugins/kn-admin"
  run_with_sudo chmod uo+x "${SNAP_COMMON}/plugins/kn-admin"
fi
if [ ! -f "${SNAP_COMMON}/plugins/kn-event" ]; then
  echo "Fetching Knative CLI Event plugin version ${KNATIVE_VERSION} in ${SNAP_COMMON}/plugins/kn-event"
  run_with_sudo mkdir -p "${SNAP_COMMON}/plugins"
  fetch_as https://github.com/knative-sandbox/kn-plugin-event/releases/download/knative-v${KNATIVE_VERSION}/kn-event-linux-${ARCH} "${SNAP_COMMON}/plugins/kn-event"
  run_with_sudo chmod uo+x "${SNAP_COMMON}/plugins/kn-event"
fi
if [ ! -f "${SNAP_COMMON}/plugins/kn-func" ] && [ "${ARCH}" = "amd64" ]; then
  echo "Fetching Knative Functions plugin version ${KNATIVE_FUNC_VERSION} in ${SNAP_COMMON}/plugins/kn-func"
  run_with_sudo mkdir -p "${SNAP_COMMON}/plugins"
  fetch_as https://github.com/knative/func/releases/download/knative-v${KNATIVE_FUNC_VERSION}/func_linux_${ARCH} "${SNAP_COMMON}/plugins/kn-func"
  run_with_sudo chmod uo+x "${SNAP_COMMON}/plugins/kn-func"
fi

if [ "$KNATIVE_SERVING" = "true" ]; then
    echo ""
    echo ""
    echo "Enable metalb addon to get a loadbalancer for Knative Serving, for example microk8s enable metallb:10.64.140.43-10.64.140.49"
    echo ""
    echo "Configure the domain for Knative services using:"
    echo "kubectl get svc -n knative-serving kourier"
    echo "kubectl patch configmap -n knative-serving config-domain -p '{"data": {"EXTERNAL-IP.sslip.io": ""}}'"
    echo ""
fi
echo ""
echo ""
echo "To be able to use 'microk8s kn <plugin>' such as 'func' add to env PATH the value ${SNAP_COMMON}/plugins"
echo ""
echo "Visit https://knative.dev/docs/install/operator/knative-with-operators/ for more Knative customizations"
echo ""
